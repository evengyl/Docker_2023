version: "3.8"
name: "my-project-name"

services:

  api:
    container_name: apiRest
    build: "./api"
    env_file:
      - ./.env
    environment:
      APP_MYSQL_HOST: $APP_MYSQL_HOST
      APP_MYSQL_USER: $APP_MYSQL_USER
      APP_MYSQL_PASSWORD: $APP_MYSQL_PASSWORD
      APP_MYSQL_DATABASE: $APP_MYSQL_DATABASE
    restart: on-failure
    depends_on:
      - db
    ports:
      - "3001:3000"


  db:
    container_name: dbMysql
    build: "./db"
    volumes: 
      - "./volumes:/var/lib/mysql"
    env_file:
      - ./.env
    environment:
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
      MYSQL_PASSWORD: $MYSQL_PASSWORD
      MYSQL_USER: $MYSQL_USER
      MYSQL_DATABASE: $MYSQL_DATABASE
    restart: always
    deploy:
      resources:
        limits:
          cpus: '10'
          memory: 512m
        reservations:
          cpus: '5'
          memory: 256m


  angu_prod:
    container_name: angularProduction
    build: ./anguProdBuilder
    restart: always
    depends_on:
      - api
    ports:
      - "8080:80"
    replicas: 3


  front_angu:
    container_name: angularDev
    build: ./frontAngu
    restart: always
    depends_on:
      - api
    ports:
      - "4201:4200"


  registry:
    image: registry:2
    ports: 
      - "8000:5000"
    environment:
      REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /datas
    volumes:
      - ./datas_volumes:/datas

  springboot-api-demo:
    container_name: "api"
    build: "./sringBoot"
    mem_limit: 1024m
    ports:
      - "8080:8080"
    env_file:
      - ./.env
    environment:
      SPRING_DATASOURCE_URL: $SPRING_DATASOURCE_URL
      SRPING_DATASOURCE_USERNAME: SRPING_DATASOURCE_USERNAME
      SRPING_DATASOURCE_PASSWORD: SRPING_DATASOURCE_PASSWORD
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.001'
          memory: 50M

  postgres:
    container_name: postgres_database
    image: postgres:latest
    env_file:
      - ./.env
    environment:
      POSTGRES_ROOT_PASSWORD: $POSTGRES_ROOT_PASSWORD
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    networks:
      - template_network
    volumes:
      - ./postgres/create_database.sql:/docker-entrypoint-initdb.d/create_tables.sql

  dbssms:
    image: "mcr.microsoft.com/mssql/server:2019-latest"
    container_name: mssql
    user: root
    environment:
        ACCEPT_EULA: "Y"
        SA_PASSWORD: Test1234_
    ports:
    - 1433:1433
    volumes:
    - ./mssql/data:/var/opt/mssql/data
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P test1234 -Q "SELECT 1" || exit 1
      interval: 30s
      timeout: 30s
      retries: 3

#docker run -d -p 5000:5000 --restart=always --name registry registry:2


#docker tag my-project-name-front1 localhost:8000/my-project-name-front1
#docker tag my-project-name-api localhost:8000/my-project-name-api
#docker tag my-project-name-db localhost:8000/my-project-name-db

#docker push localhost:8000/my-project-name-front1
#docker push localhost:8000/my-project-name-api
#docker push localhost:8000/my-project-name-db

#volumes:

networks:
  backend:
  front:
    driver: bridge
#docker compose -f "docker-compose.yml" up -d --build 